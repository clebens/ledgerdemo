@{
    ViewBag.Title = "Account Management";
}

<div id="accountmanagement">
    <h1>Account Summary</h1>
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>balance</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>{{account.accountid}}</th>
                <td>${{account.balance.toFixed(2)}}</td>
            </tr>
        </tbody>
    </table>

    <h1>Transaction History</h1>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>type</th>
                <th>amount</th>
                <th>time</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="t in transactionViews">
                <td>{{t.type}}</td>
                <td v-bind:class="{'text-danger': t.type == 'Withdrawal'}">${{t.adjustment.toFixed(2)}}</td>
                <td>{{t.datecreated}}</td>
            </tr>
        </tbody>
    </table>
    <br />
    <div class="row">
        <div class="col-xs-3">
            <label for="depositinput">Deposit</label>
            <input id="depositinput" class="form-control input-lg" v-model="depositAmount" />
            <button class="btn btn-submit" @@click="deposit">Deposit</button>
            <div v-if="depositError" class="container text-danger">
                <p>{{depositError}}</p>
            </div>

        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-xs-3">
            <label for="withdrawinput">Withdraw</label>
            <input id="depositinput" class="form-control input-lg" v-model="withdrawAmount" />
            <button class="btn btn-submit" @@click="withdraw">Withdraw</button>
            <div v-if="withdrawError" class="container text-danger">
                <p>{{withdrawError}}</p>
            </div>
        </div>
    </div>

        @section scripts {

            <script>
        $(function () {
            var userid = @((int)ViewData["userid"]);
            new Vue({
                data: function () {
                    return {
                        account: {},
                        transactions: [],
                        depositAmount: 0,
                        withdrawAmount: 0,
                        withdrawError: null,
                        depositError: null
                    }
                },
                el: '#accountmanagement',
                computed: {
                    transactionViews: function () {
                        return this.transactions.map(function (x) {
                            var types = { 1: "Deposit", 2: "Withdrawal" };
                            var rtn = $.extend({}, x);
                            rtn.type = types[rtn.type];
                            if (rtn.type == "Withdrawal") rtn.adjustment *= -1;
                            rtn.datecreated = moment(x.datecreated).format("hh:mm:ss A MM/DD/YYYY");
                            return rtn;
                        })
                    }
                },
                created: function () {
                    $.get("/API/Account/user/" + userid, function (response) {
                        this.account = response;
                        this.refreshTransactions();
                    }.bind(this))

                },
                methods: {
                    deposit: function () {
                        this.depositError = null;

                        $.post("/API/Account/" + this.account.accountid + "/deposit", { amount: this.depositAmount },
                            function (response) {
                                this.depositAmount = 0;
                                this.account = response.account;
                                this.refreshTransactions();
                            }.bind(this))
                            .fail(function (response) {
                                this.depositError =
                                    (response.responseJSON && response.responseJSON.message) ?
                                        response.responseJSON.message :
                                        "Error processing deposit";
                            }.bind(this));
                    },
                    withdraw: function () {
                        this.withdrawError = null;

                        $.post("/API/Account/" + this.account.accountid + "/withdraw", { amount: this.withdrawAmount },
                            function (response) {
                                this.withdrawAmount = 0;
                                this.account = response.account;
                                this.refreshTransactions();
                            }.bind(this)
                        )
                            .fail(function (response) {
                                this.withdrawError = (response.responseJSON && response.responseJSON.message) ?
                                    response.responseJSON.message :
                                    "Error processing withdrawal";
;
                            }.bind(this));
                    },
                    refreshTransactions: function () {
                        $.get("/API/Account/" + this.account.accountid + "/transactions", function (response) {
                            this.transactions = response;
                        }.bind(this))
                    }
                }
            });
        })
            </script>
        }
